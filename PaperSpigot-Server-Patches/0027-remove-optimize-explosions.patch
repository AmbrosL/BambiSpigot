From 80bfe57682e6fe0b3403ef8e93b58260786e76a2 Mon Sep 17 00:00:00 2001
From: AmbrosL <AmbrosL@users.noreply.github.com>
Date: Sat, 28 Apr 2018 14:55:41 +0200
Subject: [PATCH] remove optimize explosions


diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index f4ccd8d4..c4ebdba0 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -133,7 +133,7 @@ public class Explosion {
                         d8 /= d11;
                         d9 /= d11;
                         d10 /= d11;
-                        double d12 = this.getBlockDensity(vec3d, entity.getBoundingBox()); // PaperSpigot - Optimize explosions
+                        double d12 = (double) this.world.a(vec3d, entity.getBoundingBox());
                         double d13 = (1.0D - d7) * d12;
 
                         // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
@@ -302,85 +302,4 @@ public class Explosion {
         return this.blocks;
     }
 
-    // PaperSpigot start - Optimize explosions
-    private float getBlockDensity(Vec3D vec3d, AxisAlignedBB aabb) {
-        if (!this.world.paperSpigotConfig.optimizeExplosions) {
-            return this.world.a(vec3d, aabb);
-        }
-
-        CacheKey key = new CacheKey(this, aabb);
-        Float blockDensity = this.world.explosionDensityCache.get(key);
-        if (blockDensity == null) {
-            blockDensity = this.world.a(vec3d, aabb);
-            this.world.explosionDensityCache.put(key, blockDensity);
-        }
-
-        return blockDensity;
-    }
-
-    static class CacheKey {
-        private final World world;
-        private final double posX, posY, posZ;
-        private final double minX, minY, minZ;
-        private final double maxX, maxY, maxZ;
-
-        public CacheKey(Explosion explosion, AxisAlignedBB aabb) {
-            this.world = explosion.world;
-            this.posX = explosion.posX;
-            this.posY = explosion.posY;
-            this.posZ = explosion.posZ;
-            this.minX = aabb.a;
-            this.minY = aabb.b;
-            this.minZ = aabb.c;
-            this.maxX = aabb.d;
-            this.maxY = aabb.e;
-            this.maxZ = aabb.f;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            CacheKey cacheKey = (CacheKey) o;
-
-            if (Double.compare(cacheKey.posX, posX) != 0) return false;
-            if (Double.compare(cacheKey.posY, posY) != 0) return false;
-            if (Double.compare(cacheKey.posZ, posZ) != 0) return false;
-            if (Double.compare(cacheKey.minX, minX) != 0) return false;
-            if (Double.compare(cacheKey.minY, minY) != 0) return false;
-            if (Double.compare(cacheKey.minZ, minZ) != 0) return false;
-            if (Double.compare(cacheKey.maxX, maxX) != 0) return false;
-            if (Double.compare(cacheKey.maxY, maxY) != 0) return false;
-            if (Double.compare(cacheKey.maxZ, maxZ) != 0) return false;
-            return world.equals(cacheKey.world);
-        }
-
-        @Override
-        public int hashCode() {
-            int result;
-            long temp;
-            result = world.hashCode();
-            temp = Double.doubleToLongBits(posX);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(posY);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(posZ);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(minX);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(minY);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(minZ);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(maxX);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(maxY);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            temp = Double.doubleToLongBits(maxZ);
-            result = 31 * result + (int) (temp ^ (temp >>> 32));
-            return result;
-        }
-    }
-    // PaperSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f342c245..501aca84 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -866,7 +866,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 worldserver.timings.tracker.stopTiming(); // Spigot
                 this.methodProfiler.b();
                 this.methodProfiler.b();
-                worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index d4f337e2..6f0b6efc 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -137,7 +137,6 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public ExecutorService lightingExecutor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("PaperSpigot - Lighting Thread").build()); // PaperSpigot - Asynchronous lighting updates
-    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<Explosion.CacheKey, Float>(); // PaperSpigot - Optimize explosions
 
     public static long chunkToKey(int x, int z)
     {
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index 6ad8e817..53080e87 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -309,12 +309,6 @@ public class PaperSpigotWorldConfig
         fallingBlocksCollideWithSigns = getBoolean( "falling-blocks-collide-with-signs", false );
     }
 
-    public boolean optimizeExplosions;
-    private void optimizeExplosions()
-    {
-        optimizeExplosions = getBoolean( "optimize-explosions", false );
-    }
-
     public boolean fastDrainLava;
     public boolean fastDrainWater;
     private void fastDraining()
-- 
2.17.0.windows.1

